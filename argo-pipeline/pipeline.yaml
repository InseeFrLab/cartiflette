apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: cartiflette-pipeline-
  namespace: projet-cartiflette
spec:
  entrypoint: main
  serviceAccountName: workflow
  volumeClaimTemplates:
    - metadata:
        name: volume-workflow-tmp
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 10Gi


  templates:
    - name: main

  # --------------------------
  # DAG COMPONENTS
  # ---------------------------

      dag:
        tasks:
        
          - name: test-volume
            template: test-volume
            
          # STEP 1 : RETRIEVE ALL (NEW) FILES FROM SOURCES AND UPLOAD TO MINIO
          - name: download-all-sources
            template: download-all-sources
            
          # STEP 2 : CHECK WICH VINTAGE SHOULD BE RE-PROCESSED FROM (NEW) RAW SOURCES
          - name: select_downstream_vintage_to_process
            template: select_downstream_vintage_to_process
            dependencies: [ download-all-sources ]
            arguments:
              parameters:
              - name: download_results
                value: "{{tasks.download-all-sources.outputs.parameters.download_all_results}}"
            
          # STEP 3.1 : CREATE BASE GEODATASETS ON MINIO FROM RAW TERRITORIAL FILES
          - name: make-base-geodatasets
            template: make-base-geodatasets
            dependencies: [ select_downstream_vintage_to_process ]
            arguments:
              parameters:
              - name: years
                value: "{{tasks.select_downstream_vintage_to_process.outputs.parameters.geodatasets_vintage_to_update}}"
          
          # STEP 3.2 : CREATE METADATA FILES ON MINIO FROM RAW INSEE FILES
          - name: make-metadata
            template: make-metadata
            dependencies: [ select_downstream_vintage_to_process ]
            arguments:
              parameters:
              - name: years
                value: "{{tasks.select_downstream_vintage_to_process.outputs.parameters.metadata_vintage_to_update}}"
            
          # STEP 4.1. SPLIT BY DEPARTEMENT
          - name: prepare-split-departement
            template: prepare-split
            dependencies: [ make-base-geodatasets, make-metadata ]
            arguments:
              parameters:
              - name: restrict_field
                value: "DEPARTEMENT"

          - name: split-departement
            template: split-dataset
            dependencies: [ prepare-split-departement ]
            arguments:
              parameters:
              - name: split_type
                value: "DEPARTEMENT"
              - name: format_output
                value: "{{item.format-output}}"
              - name: year
                value: "{{item.year}}"
              - name: crs
                value: "{{item.crs}}"
              - name: source
                value: "{{item.source}}"
              - name: simplification
                value: "{{item.simplification}}"
              - name: level_polygons
                value: "{{item.level-polygons}}"
              - name: filter_by
                value: "{{item.filter-by}}"
            withParam: "{{tasks.prepare-split-departement.outputs.result}}"

          # STEP 4.2. SPLIT BY COMMUNE
          - name: prepare-split-commune
            template: prepare-split
            dependencies: [ make-base-geodatasets, make-metadata ]
            arguments:
              parameters:
              - name: restrict_field
                value: "COMMUNE"
          - name: split-commune
            template: split-dataset
            dependencies: [ prepare-split-commune ]
            arguments:
              parameters:
              - name: split_type
                value: "COMMUNE"
              - name: format_output
                value: "{{item.format-output}}"
              - name: year
                value: "{{item.year}}"
              - name: crs
                value: "{{item.crs}}"
              - name: source
                value: "{{item.source}}"
              - name: simplification
                value: "{{item.simplification}}"
              - name: level_polygons
                value: "{{item.level-polygons}}"
              - name: filter_by
                value: "{{item.filter-by}}"
            withParam: "{{tasks.prepare-split-commune.outputs.result}}"
          # STEP 4.3. SPLIT BY REGION
          - name: prepare-split-region
            template: prepare-split
            dependencies: [ make-base-geodatasets, make-metadata ]
            arguments:
              parameters:
              - name: restrict_field
                value: "REGION"
          - name: split-region
            template: split-dataset
            dependencies: [ prepare-split-region ]
            arguments:
              parameters:
              - name: split_type
                value: "REGION"
              - name: format_output
                value: "{{item.format-output}}"
              - name: year
                value: "{{item.year}}"
              - name: crs
                value: "{{item.crs}}"
              - name: source
                value: "{{item.source}}"
              - name: simplification
                value: "{{item.simplification}}"
              - name: level_polygons
                value: "{{item.level-polygons}}"
              - name: filter_by
                value: "{{item.filter-by}}"
            withParam: "{{tasks.prepare-split-region.outputs.result}}"
          # STEP 4.4. SPLIT BY BASSIN VIE
          - name: prepare-split-bassin-vie
            template: prepare-split
            dependencies: [ make-base-geodatasets, make-metadata ]
            arguments:
              parameters:
              - name: restrict_field
                value: "BASSIN_VIE"
          - name: split-bassin-vie
            template: split-dataset
            dependencies: [ prepare-split-bassin-vie ]
            arguments:
              parameters:
              - name: split_type
                value: "BASSIN_VIE"
              - name: format_output
                value: "{{item.format-output}}"
              - name: year
                value: "{{item.year}}"
              - name: crs
                value: "{{item.crs}}"
              - name: source
                value: "{{item.source}}"
              - name: simplification
                value: "{{item.simplification}}"
              - name: level_polygons
                value: "{{item.level-polygons}}"
              - name: filter_by
                value: "{{item.filter-by}}"
            withParam: "{{tasks.prepare-split-bassin-vie.outputs.result}}"
          # STEP 4.5. SPLIT BY ZONE_EMPLOI
          - name: prepare-split-zone-emploi
            template: prepare-split
            dependencies: [ make-base-geodatasets, make-metadata ]
            arguments:
              parameters:
              - name: restrict_field
                value: "ZONE_EMPLOI"
          - name: split-zone-emploi
            template: split-dataset
            dependencies: [ prepare-split-zone-emploi ]
            arguments:
              parameters:
              - name: split_type
                value: "ZONE_EMPLOI"
              - name: format_output
                value: "{{item.format-output}}"
              - name: year
                value: "{{item.year}}"
              - name: crs
                value: "{{item.crs}}"
              - name: source
                value: "{{item.source}}"
              - name: simplification
                value: "{{item.simplification}}"
              - name: level_polygons
                value: "{{item.level-polygons}}"
              - name: filter_by
                value: "{{item.filter-by}}"
            withParam: "{{tasks.prepare-split-zone-emploi.outputs.result}}"
          # STEP 4.6. SPLIT BY UNITE_URBAINE
          - name: prepare-split-unite-urbaine
            template: prepare-split
            dependencies: [ make-base-geodatasets, make-metadata ]
            arguments:
              parameters:
              - name: restrict_field
                value: "UNITE_URBAINE"
          - name: split-unite-urbaine
            template: split-dataset
            dependencies: [ prepare-split-unite-urbaine ]
            arguments:
              parameters:
              - name: split_type
                value: "UNITE_URBAINE"
              - name: format_output
                value: "{{item.format-output}}"
              - name: year
                value: "{{item.year}}"
              - name: crs
                value: "{{item.crs}}"
              - name: source
                value: "{{item.source}}"
              - name: simplification
                value: "{{item.simplification}}"
              - name: level_polygons
                value: "{{item.level-polygons}}"
              - name: filter_by
                value: "{{item.filter-by}}"
            withParam: "{{tasks.prepare-split-unite-urbaine.outputs.result}}"
          # STEP 4.7. SPLIT BY AIRE_ATTRACTION_VILLES
          - name: prepare-split-aire-attraction
            template: prepare-split
            dependencies: [ make-base-geodatasets, make-metadata ]
            arguments:
              parameters:
              - name: restrict_field
                value: "AIRE_ATTRACTION_VILLES"
          - name: split-aire-attraction
            template: split-dataset
            dependencies: [ prepare-split-aire-attraction ]
            arguments:
              parameters:
              - name: split_type
                value: "AIRE_ATTRACTION_VILLES"
              - name: format_output
                value: "{{item.format-output}}"
              - name: year
                value: "{{item.year}}"
              - name: crs
                value: "{{item.crs}}"
              - name: source
                value: "{{item.source}}"
              - name: simplification
                value: "{{item.simplification}}"
              - name: level_polygons
                value: "{{item.level-polygons}}"
              - name: filter_by
                value: "{{item.filter-by}}"
            withParam: "{{tasks.prepare-split-aire-attraction.outputs.result}}"


  # --------------------------
  # TEMPLATES DEFINITION
  # ---------------------------


    - name: test-volume
      container:
        image: inseefrlab/cartiflette
        command: [sh, -c]
        args: ["echo $PATH_WRITING_S3 ;
                echo "Ceci est un test d'ecriture;" > ${LOCAL_DATA_PATH}/dummy.csv";
                head -n 1 ${LOCAL_DATA_PATH}/tagc.csv"];
        env: *env_parameters
        volumeMounts:
          - name: volume-workflow-tmp
            mountPath: /mnt
            
    - name: download-all-sources
      inputs:
        artifacts:
          - name: code
            path: /mnt/bin
            git:
              repo: https://github.com/inseefrlab/cartiflette
              revision: "feat/refacto_pipeline_first_steps"
      outputs:
        parameters:
        - name: download_all_results
          valueFrom:
            path: download_all_results.json
      container:
        image: inseefrlab/cartiflette
        command: [sh, -c]
        args: ["
                mkdir -p $LOCAL_DATA_PATH ;
                mkdir -p /mnt/bin/src ;
                mv /mnt/bin/argo-pipeline/src/* /mnt/bin/src ;
                python /mnt/bin/src/download_all_sources.py --path $PATH_WRITING_S3 --localpath $LOCAL_DATA_PATH --years 2024,2023;
                "]
        volumeMounts:
          - name: volume-workflow-tmp
            mountPath: /mnt
        env: &env_parameters
          - name: PATH_WRITING_S3
            value: "test"
          - name: PYTHONPATH
            value: "${PYTHONPATH}:/mnt/bin"
          - name: LOCAL_DATA_PATH
            value: "/mnt/data"
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: sa-cartiflette
                key: accessKey
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: sa-cartiflette
                key: secretKey
          - name: AWS_DEFAULT_REGION
            value: us-east-1
          - name: AWS_S3_ENDPOINT
            value: minio.lab.sspcloud.fr
          - name: MC_HOST_s3
            value: https://$AWS_ACCESS_KEY_ID:$AWS_SECRET_ACCESS_KEY@$AWS_S3_ENDPOINT

    - name: select_downstream_vintage_to_process
      inputs:
        parameters:
          - name: download_results
      outputs:
        parameters:
        - name: geodatasets_vintage_to_update
          valueFrom:
            path: geodatasets_years.json
        - name: metadata_vintage_to_update
          valueFrom:
            path: metadata_years.json
      container:
        image: inseefrlab/cartiflette
        command: [sh, -c]
        volumeMounts:
          - name: volume-workflow-tmp
            mountPath: /mnt
        args: ["
          python /mnt/bin/src/select_downstream_vintage_to_process.py --download_results '{{inputs.parameters.download_results}}'
          "]
        env: *env_parameters

    - name: make-base-geodatasets
      inputs:
        parameters:
          - name: years
      container:
        image: inseefrlab/cartiflette
        command: [sh, -c]
        volumeMounts:
          - name: volume-workflow-tmp
            mountPath: /mnt
        args: ["
                python /mnt/bin/src/make_unified_base_geodatasets.py --path $PATH_WRITING_S3 --localpath $LOCAL_DATA_PATH --years '{{inputs.parameters.years}}';
                "]
        env: *env_parameters
        
    - name: make-metadata
      inputs:
        parameters:
          - name: years
      container:
        image: inseefrlab/cartiflette
        command: [sh, -c]
        volumeMounts:
          - name: volume-workflow-tmp
            mountPath: /mnt
        args: ["
                python /mnt/bin/src/make_metadata_datasets.py --path $PATH_WRITING_S3 --localpath $LOCAL_DATA_PATH --years '{{inputs.parameters.years}}';
                "]
        env: *env_parameters

  # Step 2: creating template task for splitting ------------------

    - name: prepare-split
      inputs:
        parameters:
          - name: restrict_field
      container:
        image: inseefrlab/cartiflette
        command: [sh, -c]
        volumeMounts:
          - name: volume-workflow-tmp
            mountPath: /mnt
        args: ["
          python /mnt/bin/src/crossproduct.py --restrictfield '{{inputs.parameters.restrict_field}}'
          "]

    - name: split-dataset
      inputs:
        parameters:
        - name: split_type
        - name: format_output
        - name: year
        - name: crs
        - name: source
        - name: simplification
        - name: level_polygons
        - name: filter_by
      container:
        image: inseefrlab/cartiflette
        command: ["sh", "-c"]
        args: ["
          mkdir -p temp/ && cp /mnt/data/tagc.csv temp/tagc.csv ;
          python /mnt/bin/src/split_merge_tiles.py \
          --path $PATH_WRITING_S3 \
          --format_output {{inputs.parameters.format_output}} \
          --year {{inputs.parameters.year}} \
          --crs {{inputs.parameters.crs}} \
          --source {{inputs.parameters.source}} \
          --simplification {{inputs.parameters.simplification}} \
          --level_polygons {{inputs.parameters.level_polygons}} \
          --filter_by {{inputs.parameters.filter_by}}"
        ]
        volumeMounts:
          - name: volume-workflow-tmp
            mountPath: /mnt
        env: *env_parameters

